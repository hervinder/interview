
Critical Rendering Path--

1)DOM
2)CSSOM
3)Render Tree
4)Layout
5)Paint

--->  executing our inline script blocks DOM construction, which also delays the initial render.
---> the browser delays script execution and DOM construction until it has finished downloading and constructing the CSSOM.
---> In the case of an external JavaScript file the browser must pause to wait for the script to be fetched from disk, cache, or a remote server, which can add tens to thousands of milliseconds of delay to the critical rendering path.

To void it use -- async keyword
<script src="app.js" async></script>
Adding the async keyword to the script tag tells the browser not to block DOM construction while it waits for the script to become available, which can significantly improve performance.


----- 
Critical Rendering  Measure

<!DOCTYPE html>
<html>
  <head>
    <title>Critical Path: Measure</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link href="style.css" rel="stylesheet">
    <script>
      function measureCRP() {
        var t = window.performance.timing,
          interactive = t.domInteractive - t.domLoading,
          dcl = t.domContentLoadedEventStart - t.domLoading,
          complete = t.domComplete - t.domLoading;
        var stats = document.createElement('p');
        stats.textContent = 'interactive: ' + interactive + 'ms, ' +
            'dcl: ' + dcl + 'ms, complete: ' + complete + 'ms';
        document.body.appendChild(stats);
      }
    </script>
  </head>
  <body onload="measureCRP()">
    <p>Hello <span>web performance</span> students!</p>
    <div><img src="awesome-photo.jpg"></div>
  </body>
  
 ------------------------- Preload--------------------
 
<link rel="preload"> informs the browser that a resource is needed as part of the current navigation, and that it should start getting fetched as soon as possible. Here’s how you use it:

<link rel="preload" as="script" href="super-important.js">
<link rel="preload" as="style" href="critical.css">
  
Use-case: Fonts
Fonts are a great example of late-discovered resources that must be fetched, often sitting at the bottom of one of several CSS files loaded by a page.

In order to reduce the amount of time the user has to wait for the text content of your site, as well as avoid jarring flashes between system fonts and your preferred ones, you can use <link rel="preload"> in your HTML to let the browser know immediately that a font is needed
  
  
   ------------------------- Preconnect--------------------
   
<link rel="preconnect"> informs the browser that your page intends to establish a connection to another origin, and that you’d like the process to start as soon as possible.
  
  
  Use-case: Streaming Media
  
   ------------------------- Prefetch--------------------
<link rel="prefetch"> is somewhat different from <link rel="preload"> and <link rel="preconnect">, in that it doesn’t try to make something critical happen faster; instead, it tries to make something non-critical happen earlier, if there’s a chance.

It does this by informing the browser of a resource that is expected to be needed as part of a future navigation or user interaction,





OPtimization

Decrease Front-end Size---
Use the production mode (webpack 4 only)

1. Enable minification
Minification is when you compress the code by removing extra spaces, shortening variable names and so on
2.Specify NODE_ENV=production
3. Use ES modules
When you use ES modules, webpack becomes able to do tree-shaking. Tree-shaking is when a bundler traverses the whole dependency tree, checks what dependencies are used, and removes unused ones. So, if you use the ES module syntax, webpack can eliminate the unused code:
--------Tree shaking---------
Tree shaking is a term commonly used in the JavaScript context for dead-code elimination
4. Optimize images


---Steps for optimzation------
Enable the production mode if you use webpack 4
Minimize your code with the bundle-level minifier and loader options
Remove the development-only code by replacing NODE_ENV with production
Use ES modules to enable tree shaking
Compress images
Apply dependency-specific optimizations
Enable module concatenation
Use externals if this makes sense for you



